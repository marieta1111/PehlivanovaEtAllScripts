%% Import data from text file.
% Script for importing data from the following text file:
%
%    /data/joy/BBL/projects/pehlivanovaPncItc/subjectData/ravens/n449_analysis_sample_June2016.csv
%whose
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/06/19 17:06:03

%% Initialize variables.
filename = '/data/joy/BBL/projects/pehlivanovaPncItc/subjectData/demoBehavData/n453_ITC_unique_bblids.csv';
delimiter = ',';
startRow = 2;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122]);
rawCellColumns = raw(:, [4,5]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
bblid = cell2mat(rawNumericColumns(:, 1));
scanid = cell2mat(rawNumericColumns(:, 2));
timepoint = cell2mat(rawNumericColumns(:, 3));
dotest_scales = rawCellColumns(:, 1);
kddisc_valid_code = rawCellColumns(:, 2);
kddisc_q_01 = cell2mat(rawNumericColumns(:, 4));
kddisc_trr_01 = cell2mat(rawNumericColumns(:, 5));
kddisc_q_02 = cell2mat(rawNumericColumns(:, 6));
kddisc_trr_02 = cell2mat(rawNumericColumns(:, 7));
kddisc_q_03 = cell2mat(rawNumericColumns(:, 8));
kddisc_trr_03 = cell2mat(rawNumericColumns(:, 9));
kddisc_q_04 = cell2mat(rawNumericColumns(:, 10));
kddisc_trr_04 = cell2mat(rawNumericColumns(:, 11));
kddisc_q_05 = cell2mat(rawNumericColumns(:, 12));
kddisc_trr_05 = cell2mat(rawNumericColumns(:, 13));
kddisc_q_06 = cell2mat(rawNumericColumns(:, 14));
kddisc_trr_06 = cell2mat(rawNumericColumns(:, 15));
kddisc_q_07 = cell2mat(rawNumericColumns(:, 16));
kddisc_trr_07 = cell2mat(rawNumericColumns(:, 17));
kddisc_q_08 = cell2mat(rawNumericColumns(:, 18));
kddisc_trr_08 = cell2mat(rawNumericColumns(:, 19));
kddisc_q_09 = cell2mat(rawNumericColumns(:, 20));
kddisc_trr_09 = cell2mat(rawNumericColumns(:, 21));
kddisc_q_10 = cell2mat(rawNumericColumns(:, 22));
kddisc_trr_10 = cell2mat(rawNumericColumns(:, 23));
kddisc_q_11 = cell2mat(rawNumericColumns(:, 24));
kddisc_trr_11 = cell2mat(rawNumericColumns(:, 25));
kddisc_q_12 = cell2mat(rawNumericColumns(:, 26));
kddisc_trr_12 = cell2mat(rawNumericColumns(:, 27));
kddisc_q_13 = cell2mat(rawNumericColumns(:, 28));
kddisc_trr_13 = cell2mat(rawNumericColumns(:, 29));
kddisc_q_14 = cell2mat(rawNumericColumns(:, 30));
kddisc_trr_14 = cell2mat(rawNumericColumns(:, 31));
kddisc_q_15 = cell2mat(rawNumericColumns(:, 32));
kddisc_trr_15 = cell2mat(rawNumericColumns(:, 33));
kddisc_q_16 = cell2mat(rawNumericColumns(:, 34));
kddisc_trr_16 = cell2mat(rawNumericColumns(:, 35));
kddisc_q_17 = cell2mat(rawNumericColumns(:, 36));
kddisc_trr_17 = cell2mat(rawNumericColumns(:, 37));
kddisc_q_18 = cell2mat(rawNumericColumns(:, 38));
kddisc_trr_18 = cell2mat(rawNumericColumns(:, 39));
kddisc_q_19 = cell2mat(rawNumericColumns(:, 40));
kddisc_trr_19 = cell2mat(rawNumericColumns(:, 41));
kddisc_q_20 = cell2mat(rawNumericColumns(:, 42));
kddisc_trr_20 = cell2mat(rawNumericColumns(:, 43));
kddisc_q_21 = cell2mat(rawNumericColumns(:, 44));
kddisc_trr_21 = cell2mat(rawNumericColumns(:, 45));
kddisc_q_22 = cell2mat(rawNumericColumns(:, 46));
kddisc_trr_22 = cell2mat(rawNumericColumns(:, 47));
kddisc_q_23 = cell2mat(rawNumericColumns(:, 48));
kddisc_trr_23 = cell2mat(rawNumericColumns(:, 49));
kddisc_q_24 = cell2mat(rawNumericColumns(:, 50));
kddisc_trr_24 = cell2mat(rawNumericColumns(:, 51));
kddisc_q_25 = cell2mat(rawNumericColumns(:, 52));
kddisc_trr_25 = cell2mat(rawNumericColumns(:, 53));
kddisc_q_26 = cell2mat(rawNumericColumns(:, 54));
kddisc_trr_26 = cell2mat(rawNumericColumns(:, 55));
kddisc_q_27 = cell2mat(rawNumericColumns(:, 56));
kddisc_trr_27 = cell2mat(rawNumericColumns(:, 57));
kddisc_q_28 = cell2mat(rawNumericColumns(:, 58));
kddisc_trr_28 = cell2mat(rawNumericColumns(:, 59));
kddisc_q_29 = cell2mat(rawNumericColumns(:, 60));
kddisc_trr_29 = cell2mat(rawNumericColumns(:, 61));
kddisc_q_30 = cell2mat(rawNumericColumns(:, 62));
kddisc_trr_30 = cell2mat(rawNumericColumns(:, 63));
kddisc_q_31 = cell2mat(rawNumericColumns(:, 64));
kddisc_trr_31 = cell2mat(rawNumericColumns(:, 65));
kddisc_q_32 = cell2mat(rawNumericColumns(:, 66));
kddisc_trr_32 = cell2mat(rawNumericColumns(:, 67));
kddisc_q_33 = cell2mat(rawNumericColumns(:, 68));
kddisc_trr_33 = cell2mat(rawNumericColumns(:, 69));
kddisc_q_34 = cell2mat(rawNumericColumns(:, 70));
kddisc_trr_34 = cell2mat(rawNumericColumns(:, 71));
famid = cell2mat(rawNumericColumns(:, 72));
race = cell2mat(rawNumericColumns(:, 73));
race2 = cell2mat(rawNumericColumns(:, 74));
ethnicity = cell2mat(rawNumericColumns(:, 75));
goassessEnvSes = cell2mat(rawNumericColumns(:, 76));
goassessEnvHouseholds = cell2mat(rawNumericColumns(:, 77));
sex = cell2mat(rawNumericColumns(:, 78));
ageAtGoassess = cell2mat(rawNumericColumns(:, 79));
ageAtGo1Cnb = cell2mat(rawNumericColumns(:, 80));
ageAtCapa = cell2mat(rawNumericColumns(:, 81));
ageAtGo2Cnb = cell2mat(rawNumericColumns(:, 82));
ageAtGo1Scan = cell2mat(rawNumericColumns(:, 83));
ageAtGo2Scan = cell2mat(rawNumericColumns(:, 84));
eduCnbGo1 = cell2mat(rawNumericColumns(:, 85));
feduCnbGo1 = cell2mat(rawNumericColumns(:, 86));
meduCnbGo1 = cell2mat(rawNumericColumns(:, 87));
eduCnbGo2 = cell2mat(rawNumericColumns(:, 88));
feduCnbGo2 = cell2mat(rawNumericColumns(:, 89));
meduCnbGo2 = cell2mat(rawNumericColumns(:, 90));
handedness = cell2mat(rawNumericColumns(:, 91));
go1OrderIdemoFrac = cell2mat(rawNumericColumns(:, 92));
go1DaysFromCnbToGoassess = cell2mat(rawNumericColumns(:, 93));
go1DaysFromCnbToScan = cell2mat(rawNumericColumns(:, 94));
go1DaysFromGoassessToScan = cell2mat(rawNumericColumns(:, 95));
go2DaysFromGo1Assessment = cell2mat(rawNumericColumns(:, 96));
go2DaysFromGo1Scan = cell2mat(rawNumericColumns(:, 97));
go2DaysFromGo1Cnb = cell2mat(rawNumericColumns(:, 98));
collateral_rel = cell2mat(rawNumericColumns(:, 99));
collateral_age = cell2mat(rawNumericColumns(:, 100));
go1_scan_id = cell2mat(rawNumericColumns(:, 101));
go1_date_of_scan = cell2mat(rawNumericColumns(:, 102));
go2_scan_id = cell2mat(rawNumericColumns(:, 103));
go2_date_of_scan = cell2mat(rawNumericColumns(:, 104));
go1_date_of_cnb = cell2mat(rawNumericColumns(:, 105));
go2_date_of_cnb = cell2mat(rawNumericColumns(:, 106));
cnb1_d_k = cell2mat(rawNumericColumns(:, 107));
cnb2_d_k = cell2mat(rawNumericColumns(:, 108));
scan1_d_k = cell2mat(rawNumericColumns(:, 109));
scan2_d_k = cell2mat(rawNumericColumns(:, 110));
dates = cell2mat(rawNumericColumns(:, 111));
scan1_d_cfn = cell2mat(rawNumericColumns(:, 112));
scan2_d_cfn = cell2mat(rawNumericColumns(:, 113));
difCnb2Scan2 = cell2mat(rawNumericColumns(:, 114));
difCnb2Scan1 = cell2mat(rawNumericColumns(:, 115));
min_diff_with_scan = cell2mat(rawNumericColumns(:, 116));
date_closest_scan = cell2mat(rawNumericColumns(:, 117));
scanid_closest_scan = cell2mat(rawNumericColumns(:, 118));
itcScan = cell2mat(rawNumericColumns(:, 119));
ageAtScan_mp = cell2mat(rawNumericColumns(:, 120));


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns R;
